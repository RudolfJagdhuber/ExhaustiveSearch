% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ExhaustiveSearch.R
\name{ExhaustiveSearch}
\alias{ExhaustiveSearch}
\title{Exhaustive feature selection function}
\usage{
ExhaustiveSearch(
  formula,
  data,
  family = NULL,
  performanceMeasure = NULL,
  combsUpTo = NULL,
  nResults = 1000,
  nThreads = NULL,
  testSetIDs = NULL,
  errorVal = -1,
  allowHugeStorage = FALSE,
  quietly = FALSE
)
}
\arguments{
\item{formula}{An object of class '[formula]' (or one that can be coerced to
that class): a symbolic description of the model to be fitted.}

\item{data}{A data frame (or object coercible by `as.data.frame` to a data
frame) containing the variables in the model.}

\item{family}{A character string naming the family function similar to the
parameter in [glm()]. Currently options are 'gaussian' or 'binomial'.}

\item{performanceMeasure}{A character string naming the performance measure
to compare models by. Current options are 'AIC' or 'MSE'.}

\item{combsUpTo}{An integer of length 1 to set an upper limit to the number
of features in a combination. This can be useful to drastically reduce the
total number of combinations to a feasible size.}

\item{nResults}{An integer of length 1 to define the size of the final
ranking list. The default (1000) provides a good trade-off of memory usage
and result size. Set this value to `Inf` to store all models.}

\item{nThreads}{Number of threads to use. The default is number of CPUs
available.}

\item{testSetIDs}{A vector of row indices of data, which define the test set
partition. If this parameter is `NULL` (default), models are trained and
evaluated on the full data set. If it is set, models are trained on
`data[-testSetIDs,]` and tested on `data[testSetIDs,]`.}

\item{errorVal}{A numeric value defining what performance result is returned
if the model could not be fitted. The default (-1) makes those models
appear at the top of the result ranking.}

\item{quietly}{logical. If set to TRUE (default), status and runtime updates
are printed to the console.}
}
\value{
Object of class `ExhaustiveSearch` with elements
  \item{nModels}{The total number of evaluated models.}
  \item{runtimeSec}{The total runtime of the exhaustive search in seconds.}
  \item{ranking}{A list of the performance values and the featureIDs. The
  i-th element of both correspond. The featureIDs refer to the elements of
  `featureNames`. Formatted results of these rankings can e.g. be obtained
  with [getFeatures()].}
  \item{featureNames}{The feature names in the given data. `featureIDs` in
  the ranking element refer to this vector.}
  \item{setup}{A list of imput parameters from the function call.}
}
\description{
Performs an exhaustive feature selection. `ExhaustiveSearch()` is a fast and
scalable implementation of an exhaustive feature selection framework. It is
particularly suited for huge tasks, which would typically not be possible due
to memory limitations.  of candidate The current version allows to compute
linear and logistic regression models and compare them with respect to AIC
or MSE.
}
\details{
TODO
}
\author{
Rudolf Jagdhuber
}
